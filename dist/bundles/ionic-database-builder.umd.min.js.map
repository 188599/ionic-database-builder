{
  "version": 3,
  "file": "ionic-database-builder.umd.min.js",
  "sources": [
    "ng://ionic-database-builder/node_modules/tslib/tslib.es6.js",
    "ng://ionic-database-builder/out/src/providers/database-helper-service.ts",
    "ng://ionic-database-builder/out/src/providers/database-migration-contract.ts",
    "ng://ionic-database-builder/out/src/utils/database-migration-base.ts",
    "ng://ionic-database-builder/out/src/providers/database-migration.ts",
    "ng://ionic-database-builder/out/src/utils/database-manager.ts",
    "ng://ionic-database-builder/out/src/utils/buildable-database-manager.ts",
    "ng://ionic-database-builder/out/src/providers/database.ts",
    "ng://ionic-database-builder/out/src/utils/database-settings-factory-contract.ts",
    "ng://ionic-database-builder/out/src/database.module.ts",
    "ng://ionic-database-builder/out/src/utils/mappers-table-base.ts",
    "ng://ionic-database-builder/out/src/defaults/database-settings-factory-default.ts",
    "ng://ionic-database-builder/out/src/defaults/mappers-table-simple.ts"
  ],
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { DatabaseHelper } from \"database-builder\";\r\n\r\n@Injectable()\r\nexport class DatabaseHelperService extends DatabaseHelper {\r\n\r\n}\r\n",
    "import { MappersTableBase } from \"..\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Version } from \"./../model/version-model\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { SQLiteTransaction } from \"@ionic-native/sqlite\";\r\n\r\n@Injectable()\r\nexport abstract class DatabaseMigrationContract {\r\n\r\n    public abstract to(\r\n        version: Version,\r\n        transation: SQLiteTransaction,\r\n        mappers: MappersTableBase\r\n    ): Array<Observable<any>>;\r\n}\r\n",
    "import { Observer } from \"rxjs/Observer\";\r\nimport { Alert, App, Config } from \"ionic-angular\";\r\nimport { SQLiteObject, SQLiteTransaction } from \"@ionic-native/sqlite\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport * as momentNs from \"moment\";\r\nconst moment = momentNs;\r\n\r\nexport abstract class DatabaseMigrationBase {\r\n\r\n    constructor(\r\n        protected _app: App, protected _config: Config\r\n    ) {\r\n\r\n    }\r\n\r\n    public version(database: SQLiteObject, version: number): Promise<boolean> {\r\n        return new Promise<boolean>((resolve, reject) => {\r\n            this.checkTableVersion(database).then(_ => {\r\n                this.checkVersion(database, version)\r\n                    .subscribe(result => {\r\n                        this.migration(database, result)\r\n                            .then(r => resolve(r))\r\n                            .catch(er => reject(er));\r\n                    }, er => reject(er));\r\n            })\r\n                .catch(er => reject(er));\r\n        });\r\n    }\r\n\r\n    protected errorAlert(error: string) {\r\n        // tslint:disable-next-line:no-console\r\n        console.error(error);\r\n        const alert = new Alert(this._app, {\r\n            title: \"Erro ao salvar dados off-line!\",\r\n            message: error,\r\n            buttons: [\"OK\"]\r\n        }, this._config);\r\n        alert.present();\r\n    }\r\n\r\n    protected abstract migrationExecute(transation: SQLiteTransaction, control: { oldVersion: number, newVersion: number }): Promise<boolean>;\r\n\r\n    private checkTableVersion(database: SQLiteObject): Promise<any> {\r\n        return new Promise<any>((resolve, reject) => {\r\n            const scriptTableVersion = `CREATE TABLE IF NOT EXISTS MigrationVersion(\r\n                    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT\r\n                    , data INTEGER\r\n                    , version TEXT\r\n                    );`;\r\n            database.executeSql(scriptTableVersion, {})\r\n                .then(resolve)\r\n                .catch(reject);\r\n        });\r\n    }\r\n\r\n    private checkVersion(database: SQLiteObject, newVersion: number): Observable<{ oldVersion: number, newVersion: number }> {\r\n        return Observable.create((observer: Observer<any>) => {\r\n            this.getVersion(database).subscribe(oldVersion => {\r\n                if (oldVersion > 0) {\r\n                    if (newVersion > oldVersion) {\r\n                        // tslint:disable-next-line:no-console\r\n                        console.info(`Version old: ${oldVersion}`);\r\n                        database.executeSql(`UPDATE MigrationVersion\r\n                                SET (data, version) = (?, ?);`,\r\n                            [moment().unix(), newVersion])\r\n                            .then()\r\n                            .catch(this.errorAlert);\r\n                    }\r\n                } else {\r\n                    database.executeSql(`INSERT INTO MigrationVersion (data, version) VALUES (?, ?)`,\r\n                        [moment().unix(), newVersion])\r\n                        .then()\r\n                        .catch(this.errorAlert);\r\n                }\r\n                observer.next({\r\n                    oldVersion: oldVersion,\r\n                    newVersion: newVersion\r\n                });\r\n                observer.complete();\r\n            });\r\n        });\r\n    }\r\n\r\n    private getVersion(database: SQLiteObject): Observable<number> {\r\n        return Observable.create((observer: Observer<number>) => {\r\n            database.executeSql(`SELECT * FROM MigrationVersion`, {})\r\n                .then((result) => {\r\n                    let version = 0;\r\n                    if (result.rows.length > 0) {\r\n                        version = Number.parseFloat(result.rows.item(0).version);\r\n                    }\r\n                    observer.next(version);\r\n                    observer.complete();\r\n                })\r\n                .catch(this.errorAlert);\r\n        });\r\n    }\r\n\r\n    private migration(database: SQLiteObject, control: { oldVersion: number, newVersion: number }): Promise<boolean> {\r\n        return new Promise<boolean>((resolve, reject) => {\r\n            database.transaction((transation: SQLiteTransaction) => {\r\n                this.migrationExecute(transation, control)\r\n                    .then(r => resolve(r))\r\n                    .catch(er => reject(er));\r\n            });\r\n        });\r\n    }\r\n}\r\n",
    "import { DatabaseSettingsFactoryContract } from \"..\";\r\nimport { Version } from \"./../model/version-model\";\r\nimport { Observer } from \"rxjs/Observer\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { App, Config } from \"ionic-angular\";\r\nimport { Injectable, Injector, Optional } from \"@angular/core\";\r\nimport { SQLiteTransaction } from \"@ionic-native/sqlite\";\r\nimport { Ddl } from \"database-builder\";\r\nimport { DatabaseMigrationContract } from \"./database-migration-contract\";\r\nimport { DatabaseMigrationBase } from \"../utils/database-migration-base\";\r\n\r\n@Injectable()\r\nexport class DatabaseMigration extends DatabaseMigrationBase {\r\n\r\n    constructor(\r\n        private _injector: Injector,\r\n        private _settings: DatabaseSettingsFactoryContract,\r\n        app: App,\r\n        config: Config,\r\n        @Optional() private _databaseMigrationContract: DatabaseMigrationContract\r\n    ) {\r\n        super(\r\n            app, config\r\n        );\r\n    }\r\n\r\n    public databaseReset(transation: SQLiteTransaction): Observable<any> {\r\n\r\n        // tslint:disable-next-line:no-console\r\n        console.info(\"database reset\");\r\n\r\n        const observablesWait: Array<Observable<any>> = [];\r\n\r\n        // const mappers = this._mappersTable;\r\n        const mappers = this._settings.mapper(this._injector);\r\n\r\n        // remove dados offline da versão anterior, pois o formato dos dados foi alterado de uma versão para a outra\r\n        const ddl = new Ddl(transation, mappers, true);\r\n        mappers.forEachMapper((value, key) => {\r\n            if (!value.readOnly) {\r\n                observablesWait.push(Observable.fromPromise(ddl.drop(value.newable).execute()));\r\n                observablesWait.push(Observable.fromPromise(ddl.create(value.newable).execute()));\r\n            }\r\n        });\r\n\r\n        return Observable.forkJoin(observablesWait);\r\n    }\r\n\r\n    protected migrationExecute(transation: SQLiteTransaction, version: Version): Promise<boolean> {\r\n        return new Promise<boolean>((resolve, reject) => {\r\n\r\n            let observablesNested: Array<Observable<any>> = [];\r\n            if (this._databaseMigrationContract) {\r\n                const toObservables = this._databaseMigrationContract.to(\r\n                    version, transation, this._settings.mapper(this._injector)\r\n                );\r\n                if (toObservables && toObservables.length > 0) {\r\n                    observablesNested = observablesNested.concat(toObservables);\r\n                }\r\n            }\r\n\r\n            if (observablesNested.length === 0 && version.oldVersion < 1) {\r\n                observablesNested.push(this.databaseReset(transation));\r\n            }\r\n\r\n            this.callNested(observablesNested, 0).subscribe(result => {\r\n                resolve(result);\r\n            }, error => reject(error));\r\n        });\r\n    }\r\n\r\n    private callNested(observablesNested: Array<Observable<any>>, nextIndex: number): Observable<boolean> {\r\n        return Observable.create((observer: Observer<boolean>) => {\r\n            if (observablesNested.length > nextIndex) {\r\n                observablesNested[nextIndex].subscribe(result => {\r\n                    this.callNested(observablesNested, ++nextIndex).subscribe(_ => {\r\n                        observer.next(true);\r\n                        observer.complete();\r\n                    }, error => {\r\n                        observer.error(error);\r\n                        observer.complete();\r\n                    });\r\n                });\r\n            } else {\r\n                observer.next(true);\r\n                observer.complete();\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n",
    "import { SQLite, SQLiteObject } from \"@ionic-native/sqlite\";\r\nimport { Platform } from \"ionic-angular\";\r\n\r\nexport abstract class DatabaseManager {\r\n\r\n    private _databases: Map<string, Promise<SQLiteObject>> = new Map<string, Promise<SQLiteObject>>();\r\n\r\n    constructor(protected _platform: Platform, private _sqlite: SQLite) {\r\n\r\n    }\r\n\r\n    public cleanDatabaseName(name: string) {\r\n        return name.replace(/([^a-z0-9]+)/gi, \"-\");\r\n    }\r\n\r\n    protected addDatabaseNameExtension(databaseName: string): string {\r\n        return `${databaseName}.db`;\r\n    }\r\n\r\n    public databaseInstance(name: string, version: number): Promise<SQLiteObject> {\r\n        const keyDatabaseName: string = name + version;\r\n        return this._databases.has(keyDatabaseName)\r\n            ? this._databases.get(keyDatabaseName)\r\n            : this._databases.set(keyDatabaseName, this.createDatabase(this.addDatabaseNameExtension(this.cleanDatabaseName(name)), version)).get(keyDatabaseName);\r\n    }\r\n\r\n    public invalidateInstance() {\r\n        this._databases = new Map<string, Promise<SQLiteObject>>();\r\n    }\r\n\r\n    protected abstract migrationVersion(database: SQLiteObject, version: number): Promise<boolean>;\r\n\r\n    private createDatabase(name: string, version: number): Promise<SQLiteObject> {\r\n        return new Promise<SQLiteObject>((resolve, reject) => {\r\n            if (this._platform.is(\"cordova\")) {\r\n                const db = this._sqlite.create({\r\n                    name: name,\r\n                    location: \"default\"\r\n                });\r\n                db.then((database: SQLiteObject) => {\r\n                    this.migrationVersion(database, version)\r\n                        .then(_ => resolve(db))\r\n                        .catch(er => reject(er));\r\n                }).catch(error => {\r\n                    this.catchException(error);\r\n                    reject(error);\r\n                });\r\n            } else {\r\n                resolve(void 0);\r\n            }\r\n        });\r\n    }\r\n\r\n    private catchException(e: any) {\r\n        // tslint:disable-next-line:no-console\r\n        console.error(e);\r\n    }\r\n}\r\n",
    "import { DatabaseManager } from \"./database-manager\";\r\nimport { Platform } from \"ionic-angular\";\r\nimport { SQLite, SQLiteObject, SQLiteTransaction } from \"@ionic-native/sqlite\";\r\nimport { Crud, Ddl, ExecutableBuilder, Query, QueryCompiled, ResultExecuteSql } from \"database-builder\";\r\nimport { MappersTableBase } from \"../utils/mappers-table-base\";\r\n\r\nexport abstract class BuildableDatabaseManager extends DatabaseManager {\r\n\r\n    constructor(\r\n        platform: Platform, sqlite: SQLite,\r\n        private _mapper: MappersTableBase,\r\n        public enableLog: boolean = true\r\n    ) {\r\n        super(platform, sqlite);\r\n    }\r\n\r\n    public get mapper(): MappersTableBase {\r\n        return this._mapper;\r\n    }\r\n\r\n    public databaseInstance(): Promise<SQLiteObject> {\r\n        const database = super.databaseInstance(this.databaseName(), this.version());\r\n        if (!database) {\r\n            throw new Error(\"SQLite not avaliable!\");\r\n        }\r\n        return database;\r\n    }\r\n\r\n    public newTransaction(successTransaction: () => void): Promise<SQLiteTransaction> {\r\n        return new Promise((resolve, reject) => {\r\n            this.databaseInstance().then(database => {\r\n                database.transaction((result: SQLiteTransaction) => {\r\n                    resolve(result);\r\n                })\r\n                    .then(x => {\r\n                        successTransaction();\r\n                    })\r\n                    .catch(error => {\r\n                        reject(error);\r\n                    });\r\n            }, reject)\r\n                .catch(error => {\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n\r\n    public transaction(successTransaction: () => void): Promise<Crud> {\r\n        return new Promise((resolve, reject) => {\r\n            this.newTransaction(successTransaction)\r\n                .then((transaction) => {\r\n                    resolve(new Crud(transaction, this._mapper, this.enableLog));\r\n                })\r\n                .catch(error => {\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n\r\n    public crud(): Promise<Crud> {\r\n        return new Promise((resolve, reject) => {\r\n            this.databaseInstance().then(database => {\r\n                resolve(new Crud(database, this._mapper, this.enableLog));\r\n            })\r\n                .catch(reject);\r\n        });\r\n    }\r\n\r\n    public sql(sql: string, params: any[] = []): Promise<ResultExecuteSql> {\r\n        return new Promise((resolve, reject) => {\r\n            this.databaseInstance().then(database => {\r\n                const executable = new ExecutableBuilder(this.enableLog);\r\n                executable.execute({\r\n                    query: sql,\r\n                    // tslint:disable-next-line:object-literal-shorthand\r\n                    params: params\r\n                } as QueryCompiled, database)\r\n                    .then((cursor: ResultExecuteSql) => {\r\n                        resolve(cursor);\r\n                    });\r\n            })\r\n                .catch(reject);\r\n        });\r\n    }\r\n\r\n    public query<T>(typeT: new () => T, alias: string = void 0): Promise<Query<T>> {\r\n        return new Promise((resolve, reject) => {\r\n            this.databaseInstance()\r\n                .then(database => {\r\n                    resolve(new Query(typeT, alias, this._mapper.getMapper(typeT), database, this.enableLog));\r\n                }, reject)\r\n                .catch(reject);\r\n        });\r\n    }\r\n\r\n    public ddl(): Promise<Ddl> {\r\n        return new Promise((resolve, reject) => {\r\n            this.databaseInstance().then(database => {\r\n                resolve(new Ddl(database, this._mapper, this.enableLog));\r\n            })\r\n                .catch(reject);\r\n        });\r\n    }\r\n\r\n    protected abstract databaseName(): string;\r\n\r\n    public abstract version(): number;\r\n}\r\n",
    "import { DatabaseMigration } from \"./database-migration\";\r\nimport { Injectable, Injector } from \"@angular/core\";\r\nimport { SQLite, SQLiteObject } from \"@ionic-native/sqlite\";\r\nimport { Platform } from \"ionic-angular\";\r\nimport { BuildableDatabaseManager } from \"../utils/buildable-database-manager\";\r\nimport { DatabaseSettingsFactoryContract } from \"..\";\r\n\r\n@Injectable()\r\nexport class Database extends BuildableDatabaseManager {\r\n    constructor(\r\n        private _injector: Injector,\r\n        private _settings: DatabaseSettingsFactoryContract,\r\n        platform: Platform,\r\n        sqlite: SQLite,\r\n        private _databaseMigration: DatabaseMigration\r\n    ) {\r\n        super(platform, sqlite,\r\n            _settings.mapper(_injector)\r\n        );\r\n    }\r\n\r\n    protected migrationVersion(database: SQLiteObject, version: number): Promise<boolean> {\r\n        return this._databaseMigration.version(database, version);\r\n    }\r\n\r\n    protected databaseName(): string {\r\n        return this._settings.databaseName(this._injector);\r\n    }\r\n\r\n    public version(): number {\r\n        return this._settings.version(this._injector);\r\n    }\r\n}\r\n",
    "import { Injector } from \"@angular/core\";\r\nimport { MappersTableBase } from \"..\";\r\n\r\nexport abstract class DatabaseSettingsFactoryContract {\r\n\r\n    public abstract databaseName(injector: Injector): string;\r\n    public abstract version(injector: Injector): number;\r\n    public abstract mapper(injector: Injector): MappersTableBase;\r\n\r\n}\r\n",
    "import { Observable } from \"rxjs\";\r\nimport { ModuleWithProviders, NgModule, Provider, Type } from \"@angular/core\";\r\nimport { DatabaseHelperService } from \"./providers/database-helper-service\";\r\nimport { DatabaseMigrationContract } from \"./providers/database-migration-contract\";\r\nimport { DatabaseMigration } from \"./providers/database-migration\";\r\nimport { Database } from \"./providers/database\";\r\nimport { DatabaseSettingsFactoryContract } from \"./utils/database-settings-factory-contract\";\r\n\r\n@NgModule({\r\n    providers: [\r\n        DatabaseMigration,\r\n        Database,\r\n        DatabaseHelperService\r\n    ]\r\n})\r\n// https://stackblitz.com/edit/ionic-j3f3ym\r\nexport class DatabaseModule {\r\n\r\n    public static forRoot(\r\n        settings: Type<DatabaseSettingsFactoryContract>,\r\n        databaseMigrationContract?: Type<DatabaseMigrationContract>\r\n    ): ModuleWithProviders {\r\n        const providers: Provider[] = [\r\n            {\r\n                provide: DatabaseSettingsFactoryContract,\r\n                useClass: settings\r\n            }\r\n        ];\r\n        return this.forBase(providers);\r\n    }\r\n\r\n    public static forRootValue(\r\n        settings: DatabaseSettingsFactoryContract,\r\n        databaseMigrationContract?: Type<DatabaseMigrationContract>\r\n    ): ModuleWithProviders {\r\n        const providers: Provider[] = [\r\n            {\r\n                provide: DatabaseSettingsFactoryContract,\r\n                useValue: settings\r\n            }\r\n        ];\r\n        return this.forBase(providers);\r\n    }\r\n\r\n    private static forBase(\r\n        providers: Provider[],\r\n        databaseMigrationContract?: Type<DatabaseMigrationContract>\r\n    ): ModuleWithProviders {\r\n        if (databaseMigrationContract) {\r\n            providers.push({\r\n                provide: DatabaseMigrationContract,\r\n                useClass: databaseMigrationContract\r\n            });\r\n        }\r\n        return {\r\n            ngModule: DatabaseModule,\r\n            providers: providers\r\n        };\r\n    }\r\n}\r\n",
    "import { GetMapper, MetadataTable } from \"database-builder\";\r\n\r\nexport abstract class MappersTableBase implements GetMapper {\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    public abstract getMapper<T>(tKey: new () => T): MetadataTable<T>;\r\n    public abstract forEachMapper(callbackfn: (value: MetadataTable<any>, key: string, map: Map<string, MetadataTable<any>>) => void, thisArg?: any): void;\r\n}\r\n",
    "import { Injector } from \"@angular/core\";\r\nimport { DatabaseSettingsFactoryContract, MappersTableBase } from \"..\";\r\nimport { DatabaseSettingsModel } from \"../model/database-settings-model\";\r\n\r\nexport class DatabaseSettingsFactoryDefault extends DatabaseSettingsFactoryContract {\r\n\r\n    private _model: DatabaseSettingsModel;\r\n\r\n    constructor(\r\n        versionOrModel: number | DatabaseSettingsModel,\r\n        databaseName: string,\r\n        mapper: MappersTableBase\r\n    ) {\r\n        super();\r\n        if (Number.isInteger(versionOrModel as number)) {\r\n            this._model = {\r\n                version: versionOrModel as number,\r\n                databaseName: databaseName,\r\n                mapper: mapper\r\n            };\r\n        } else {\r\n            this._model = versionOrModel as DatabaseSettingsModel;\r\n        }\r\n    }\r\n\r\n    public databaseName(injector: Injector): string {\r\n        return this._model.databaseName;\r\n    }\r\n\r\n    public version(injector: Injector): number {\r\n        return this._model.version;\r\n    }\r\n\r\n    public mapper(): MappersTableBase {\r\n        return this._model.mapper;\r\n    }\r\n}\r\n",
    "import { DatabaseHelper, MetadataTable } from \"database-builder\";\r\nimport { MappersTableBase } from \"..\";\r\nimport { MapperSettingsModel } from \"../model/mapper-settings-model\";\r\n\r\nexport class MappersTableSimple extends MappersTableBase {\r\n\r\n    private _mappers: Map<string, MetadataTable<any>> = new Map<string, MetadataTable<any>>();\r\n\r\n    constructor(\r\n        private _databaseHelper: DatabaseHelper,\r\n        protected _defaultSettings: MapperSettingsModel\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    public mapper(\r\n        readOnly?: boolean,\r\n        keyColumn?: string,\r\n        settings: MapperSettingsModel = this._defaultSettings,\r\n        ...defaultsMapper: Array<new () => any>\r\n    ): MappersTableSimple {\r\n        defaultsMapper.forEach(mapper => {\r\n            this.add(mapper, readOnly, keyColumn);\r\n        });\r\n        return this;\r\n    }\r\n\r\n    public add<T>(\r\n        newable: new () => T,\r\n        readOnly?: boolean,\r\n        keyColumn?: string,\r\n        settings: MapperSettingsModel = this._defaultSettings,\r\n        advancedMapper: (metadata: MetadataTable<T>) => void = void 0\r\n    ): MappersTableSimple {\r\n        const metadata = new MetadataTable(newable, this._databaseHelper, readOnly, keyColumn)\r\n            .autoMapper(\r\n                settings.references,\r\n                settings.referencesId,\r\n                settings.referencesIdRecursive,\r\n                settings.referencesIdColumn\r\n            );\r\n        if (advancedMapper) {\r\n            advancedMapper(metadata);\r\n        }\r\n        this.push(metadata);\r\n        return this;\r\n    }\r\n\r\n    public getMapper<T>(tKey: new () => T): MetadataTable<T> {\r\n        return this._mappers.get(tKey.name);\r\n    }\r\n\r\n    public forEachMapper(\r\n        callbackfn: (value: MetadataTable<any>, key: string, map: Map<string, MetadataTable<any>>) => void,\r\n        thisArg?: any\r\n    ): void {\r\n        this._mappers.forEach(callbackfn);\r\n    }\r\n\r\n    private push(metadataTable: MetadataTable<any>): void {\r\n        this._mappers.set(metadataTable.instance.constructor.name, metadataTable);\r\n    }\r\n}\r\n"
  ],
  "names": [
    "extendStatics",
    "Object",
    "setPrototypeOf",
    "__proto__",
    "Array",
    "d",
    "b",
    "p",
    "hasOwnProperty",
    "__extends",
    "__",
    "this",
    "constructor",
    "prototype",
    "create",
    "DatabaseHelperService",
    "_super",
    "tslib_1.__extends",
    "DatabaseHelper",
    "type",
    "Injectable",
    "DatabaseMigrationContract",
    "moment",
    "momentNs",
    "DatabaseMigrationBase",
    "_app",
    "_config",
    "version",
    "database",
    "_this",
    "Promise",
    "resolve",
    "reject",
    "checkTableVersion",
    "then",
    "_",
    "checkVersion",
    "subscribe",
    "result",
    "migration",
    "r",
    "catch",
    "er",
    "errorAlert",
    "error",
    "console",
    "Alert",
    "title",
    "message",
    "buttons",
    "present",
    "executeSql",
    "newVersion",
    "Observable",
    "observer",
    "getVersion",
    "oldVersion",
    "info",
    "unix",
    "next",
    "complete",
    "rows",
    "length",
    "Number",
    "parseFloat",
    "item",
    "control",
    "transaction",
    "transation",
    "migrationExecute",
    "DatabaseMigration",
    "_injector",
    "_settings",
    "app",
    "config",
    "_databaseMigrationContract",
    "call",
    "databaseReset",
    "observablesWait",
    "mappers",
    "mapper",
    "ddl",
    "Ddl",
    "forEachMapper",
    "value",
    "key",
    "readOnly",
    "push",
    "fromPromise",
    "drop",
    "newable",
    "execute",
    "forkJoin",
    "observablesNested",
    "toObservables",
    "to",
    "concat",
    "callNested",
    "nextIndex",
    "Injector",
    "DatabaseSettingsFactoryContract",
    "App",
    "Config",
    "decorators",
    "Optional",
    "DatabaseManager",
    "_platform",
    "_sqlite",
    "_databases",
    "Map",
    "cleanDatabaseName",
    "name",
    "replace",
    "addDatabaseNameExtension",
    "databaseName",
    "databaseInstance",
    "keyDatabaseName",
    "has",
    "get",
    "set",
    "createDatabase",
    "invalidateInstance",
    "is",
    "db_1",
    "location",
    "migrationVersion",
    "catchException",
    "e",
    "BuildableDatabaseManager",
    "platform",
    "sqlite",
    "_mapper",
    "enableLog",
    "defineProperty",
    "Error",
    "newTransaction",
    "successTransaction",
    "x",
    "Crud",
    "crud",
    "sql",
    "params",
    "ExecutableBuilder",
    "query",
    "cursor",
    "typeT",
    "alias",
    "Query",
    "getMapper",
    "Database",
    "_databaseMigration",
    "Platform",
    "SQLite",
    "DatabaseModule",
    "forRoot",
    "settings",
    "databaseMigrationContract",
    "providers",
    "provide",
    "useClass",
    "forBase",
    "forRootValue",
    "useValue",
    "ngModule",
    "NgModule",
    "args",
    "MappersTableBase",
    "DatabaseSettingsFactoryDefault",
    "versionOrModel",
    "isInteger",
    "_model",
    "injector",
    "MappersTableSimple",
    "_databaseHelper",
    "_defaultSettings",
    "_mappers",
    "keyColumn",
    "defaultsMapper",
    "_i",
    "arguments",
    "forEach",
    "add",
    "advancedMapper",
    "metadata",
    "MetadataTable",
    "autoMapper",
    "references",
    "referencesId",
    "referencesIdRecursive",
    "referencesIdColumn",
    "tKey",
    "callbackfn",
    "thisArg",
    "metadataTable",
    "instance"
  ],
  "mappings": "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"
}
