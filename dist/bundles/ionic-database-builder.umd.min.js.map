{
  "version": 3,
  "file": "ionic-database-builder.umd.min.js",
  "sources": [
    "ng://ionic-database-builder/node_modules/tslib/tslib.es6.js",
    "ng://ionic-database-builder/out/src/dependency-injection-definition.ts",
    "ng://ionic-database-builder/out/src/utils/database-helper-service.ts",
    "ng://ionic-database-builder/out/src/providers/database-migration-contract.ts",
    "ng://ionic-database-builder/out/src/utils/migration-database-base.ts",
    "ng://ionic-database-builder/out/src/utils/mappers-table-base.ts",
    "ng://ionic-database-builder/out/src/providers/database-migration.ts",
    "ng://ionic-database-builder/out/src/utils/database-manager.ts",
    "ng://ionic-database-builder/out/src/utils/buildable-database-manager.ts",
    "ng://ionic-database-builder/out/src/providers/database.ts",
    "ng://ionic-database-builder/out/src/database.module.ts"
  ],
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n",
    "\r\nimport { InjectionToken } from \"@angular/core\";\r\n\r\nexport const VERSION = new InjectionToken<number>(\"version\");\r\nexport const DATABASE_NAME = new InjectionToken<string>(\"database_name\");\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { DatabaseHelper } from \"database-builder\";\r\n\r\n@Injectable()\r\nexport class DatabaseHelperService extends DatabaseHelper {\r\n\r\n}\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { Version } from \"./../model/version-model\";\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\n@Injectable()\r\nexport class DatabaseMigrationContract {\r\n\r\n    public to(version: Version): Array<Observable<any>> {\r\n        return [];\r\n    }\r\n}\r\n",
    "import { Observer } from \"rxjs/Observer\";\r\nimport { Alert, App, Config } from \"ionic-angular\";\r\nimport { SQLiteObject, SQLiteTransaction } from \"@ionic-native/sqlite\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport * as momentNs from \"moment\";\r\nconst moment = momentNs;\r\n\r\nexport abstract class MigrationDatabaseBase {\r\n\r\n    constructor(\r\n        protected _app: App, protected _config: Config\r\n    ) {\r\n\r\n    }\r\n\r\n    public version(database: SQLiteObject, version: number): Promise<boolean> {\r\n        return new Promise<boolean>((resolve, reject) => {\r\n            this.checkTableVersion(database).then(_ => {\r\n                this.checkVersion(database, version)\r\n                    .subscribe(result => {\r\n                        this.migration(database, result)\r\n                            .then(r => resolve(r))\r\n                            .catch(er => reject(er));\r\n                    }, er => reject(er));\r\n            })\r\n                .catch(er => reject(er));\r\n        });\r\n    }\r\n\r\n    protected errorAlert(error: string) {\r\n        // tslint:disable-next-line:no-console\r\n        console.error(error);\r\n        const alert = new Alert(this._app, {\r\n            title: \"Erro ao salvar dados off-line!\",\r\n            message: error,\r\n            buttons: [\"OK\"]\r\n        }, this._config);\r\n        alert.present();\r\n    }\r\n\r\n    protected abstract migrationExecute(transation: SQLiteTransaction, control: { oldVersion: number, newVersion: number }): Promise<boolean>;\r\n\r\n    private checkTableVersion(database: SQLiteObject): Promise<any> {\r\n        return new Promise<any>((resolve, reject) => {\r\n            const scriptTableVersion = `CREATE TABLE IF NOT EXISTS MigrationVersion(\r\n                    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT\r\n                    , data INTEGER\r\n                    , version TEXT\r\n                    );`;\r\n            database.executeSql(scriptTableVersion, {})\r\n                .then(resolve)\r\n                .catch(reject);\r\n        });\r\n    }\r\n\r\n    private checkVersion(database: SQLiteObject, newVersion: number): Observable<{ oldVersion: number, newVersion: number }> {\r\n        return Observable.create((observer: Observer<any>) => {\r\n            this.getVersion(database).subscribe(oldVersion => {\r\n                if (oldVersion > 0) {\r\n                    if (newVersion > oldVersion) {\r\n                        // tslint:disable-next-line:no-console\r\n                        console.info(`Version old: ${oldVersion}`);\r\n                        database.executeSql(`UPDATE MigrationVersion\r\n                                SET (data, version) = (?, ?);`,\r\n                            [moment().unix(), newVersion])\r\n                            .then()\r\n                            .catch(this.errorAlert);\r\n                    }\r\n                } else {\r\n                    database.executeSql(`INSERT INTO MigrationVersion (data, version) VALUES (?, ?)`,\r\n                        [moment().unix(), newVersion])\r\n                        .then()\r\n                        .catch(this.errorAlert);\r\n                }\r\n                observer.next({\r\n                    oldVersion: oldVersion,\r\n                    newVersion: newVersion\r\n                });\r\n                observer.complete();\r\n            });\r\n        });\r\n    }\r\n\r\n    private getVersion(database: SQLiteObject): Observable<number> {\r\n        return Observable.create((observer: Observer<number>) => {\r\n            database.executeSql(`SELECT * FROM MigrationVersion`, {})\r\n                .then((result) => {\r\n                    let version = 0;\r\n                    if (result.rows.length > 0) {\r\n                        version = Number.parseFloat(result.rows.item(0).version);\r\n                    }\r\n                    observer.next(version);\r\n                    observer.complete();\r\n                })\r\n                .catch(this.errorAlert);\r\n        });\r\n    }\r\n\r\n    private migration(database: SQLiteObject, control: { oldVersion: number, newVersion: number }): Promise<boolean> {\r\n        return new Promise<boolean>((resolve, reject) => {\r\n            database.transaction((transation: SQLiteTransaction) => {\r\n                this.migrationExecute(transation, control)\r\n                    .then(r => resolve(r))\r\n                    .catch(er => reject(er));\r\n            });\r\n        });\r\n    }\r\n}\r\n",
    "import { GetMapper, MetadataTable } from \"database-builder\";\r\nimport { Injectable } from \"@angular/core\";\r\n\r\nexport abstract class MappersTableBase implements GetMapper {\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    public abstract getMapper<T>(tKey: new () => T): MetadataTable<T>;\r\n    public abstract forEachMapper(callbackfn: (value: MetadataTable<any>, key: string, map: Map<string, MetadataTable<any>>) => void, thisArg?: any): void;\r\n}\r\n",
    "import { Version } from \"./../model/version-model\";\r\nimport { Observer } from \"rxjs/Observer\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Alert, App, Config } from \"ionic-angular\";\r\nimport { Injectable, Optional } from \"@angular/core\";\r\nimport { SQLiteTransaction } from \"@ionic-native/sqlite\";\r\nimport { Ddl } from \"database-builder\";\r\nimport { MigrationDatabaseBase } from \"../utils/migration-database-base\";\r\nimport { DatabaseMigrationContract } from \"./database-migration-contract\";\r\nimport { MappersTableBase } from \"../utils/mappers-table-base\";\r\n\r\n@Injectable()\r\nexport class DatabaseMigration extends MigrationDatabaseBase {\r\n\r\n    constructor(\r\n        private _mappersTable: MappersTableBase,\r\n        app: App,\r\n        config: Config,\r\n        @Optional() private _databaseMigrationContract: DatabaseMigrationContract\r\n    ) {\r\n        super(\r\n            app, config\r\n        );\r\n    }\r\n\r\n    public databaseReset(transation: SQLiteTransaction, version: Version): Observable<any> {\r\n\r\n        // tslint:disable-next-line:no-console\r\n        console.info(\"database reset\");\r\n\r\n        const observablesWait: Array<Observable<any>> = [];\r\n\r\n        // remove dados offline da versão anterior, pois o formato dos dados foi alterado de uma versão para a outra\r\n        const ddl = new Ddl(transation, this._mappersTable, true);\r\n        this._mappersTable.forEachMapper((value, key) => {\r\n            if (!value.readOnly) {\r\n                observablesWait.push(Observable.fromPromise(ddl.drop(value.newable).execute()));\r\n                observablesWait.push(Observable.fromPromise(ddl.create(value.newable).execute()));\r\n            }\r\n        });\r\n\r\n        return Observable.forkJoin(observablesWait);\r\n    }\r\n\r\n    protected migrationExecute(transation: SQLiteTransaction, version: Version): Promise<boolean> {\r\n        return new Promise<boolean>((resolve, reject) => {\r\n\r\n            let observablesNested: Array<Observable<any>> = [];\r\n            if (this._databaseMigrationContract) {\r\n                const toObservables = this._databaseMigrationContract.to(version);\r\n                if (toObservables && toObservables.length > 0) {\r\n                    observablesNested = observablesNested.concat(toObservables);\r\n                }\r\n            }\r\n\r\n            if (observablesNested.length === 0 && version.oldVersion < 1) {\r\n                observablesNested.push(this.databaseReset(transation, version));\r\n            }\r\n\r\n            this.callNested(observablesNested, 0).subscribe(result => {\r\n                resolve(result);\r\n            }, error => reject(error));\r\n        });\r\n    }\r\n\r\n    private callNested(observablesNested: Array<Observable<any>>, nextIndex: number): Observable<boolean> {\r\n        return Observable.create((observer: Observer<boolean>) => {\r\n            if (observablesNested.length > nextIndex) {\r\n                observablesNested[nextIndex].subscribe(result => {\r\n                    this.callNested(observablesNested, ++nextIndex).subscribe(_ => {\r\n                        observer.next(true);\r\n                        observer.complete();\r\n                    }, error => {\r\n                        observer.error(error);\r\n                        observer.complete();\r\n                    });\r\n                });\r\n            } else {\r\n                observer.next(true);\r\n                observer.complete();\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n",
    "import { SQLite, SQLiteObject } from \"@ionic-native/sqlite\";\r\nimport { Platform } from \"ionic-angular\";\r\n\r\nexport abstract class DatabaseManager {\r\n\r\n    private _databases: Map<string, Promise<SQLiteObject>> = new Map<string, Promise<SQLiteObject>>();\r\n\r\n    constructor(protected _platform: Platform, private _sqlite: SQLite) {\r\n\r\n    }\r\n\r\n    public cleanDatabaseName(name: string) {\r\n        return name.replace(/([^a-z0-9]+)/gi, \"-\");\r\n    }\r\n\r\n    protected addDatabaseNameExtension(databaseName: string): string {\r\n        return `${databaseName}.db`;\r\n    }\r\n\r\n    public databaseInstance(name: string, version: number): Promise<SQLiteObject> {\r\n        const keyDatabaseName: string = name + version;\r\n        return this._databases.has(keyDatabaseName)\r\n            ? this._databases.get(keyDatabaseName)\r\n            : this._databases.set(keyDatabaseName, this.createDatabase(this.addDatabaseNameExtension(this.cleanDatabaseName(name)), version)).get(keyDatabaseName);\r\n    }\r\n\r\n    public invalidateInstance() {\r\n        this._databases = new Map<string, Promise<SQLiteObject>>();\r\n    }\r\n\r\n    protected abstract migrationVersion(database: SQLiteObject, version: number): Promise<boolean>;\r\n\r\n    private createDatabase(name: string, version: number): Promise<SQLiteObject> {\r\n        return new Promise<SQLiteObject>((resolve, reject) => {\r\n            if (this._platform.is(\"cordova\")) {\r\n                const db = this._sqlite.create({\r\n                    name: name,\r\n                    location: \"default\"\r\n                });\r\n                db.then((database: SQLiteObject) => {\r\n                    this.migrationVersion(database, version)\r\n                        .then(_ => resolve(db))\r\n                        .catch(er => reject(er));\r\n                }).catch(error => {\r\n                    this.catchException(error);\r\n                    reject(error);\r\n                });\r\n            } else {\r\n                resolve(void 0);\r\n            }\r\n        });\r\n    }\r\n\r\n    private catchException(e: any) {\r\n        // tslint:disable-next-line:no-console\r\n        console.error(e);\r\n    }\r\n}\r\n",
    "import { DatabaseManager } from \"./database-manager\";\r\nimport { Platform } from \"ionic-angular\";\r\nimport { SQLite, SQLiteObject, SQLiteTransaction } from \"@ionic-native/sqlite\";\r\nimport { Crud, Ddl, ExecutableBuilder, Query, QueryCompiled, ResultExecuteSql } from \"database-builder\";\r\nimport { ValueType } from \"database-builder/src/core/utils\";\r\nimport { MappersTableBase } from \"../utils/mappers-table-base\";\r\n\r\nexport abstract class BuildableDatabaseManager extends DatabaseManager {\r\n\r\n    constructor(\r\n        platform: Platform, sqlite: SQLite,\r\n        private _getMapper: MappersTableBase,\r\n        public enableLog: boolean = true\r\n    ) {\r\n        super(platform, sqlite);\r\n    }\r\n\r\n    public databaseInstance(): Promise<SQLiteObject> {\r\n        const database = super.databaseInstance(this.databaseName(), this.version());\r\n        if (!database) {\r\n            throw new Error(\"SQLite not avaliable!\");\r\n        }\r\n        return database;\r\n    }\r\n\r\n    public newTransaction(successTransaction: () => void): Promise<SQLiteTransaction> {\r\n        return new Promise((resolve, reject) => {\r\n            this.databaseInstance().then(database => {\r\n                database.transaction((result: SQLiteTransaction) => {\r\n                    resolve(result);\r\n                })\r\n                    .then(x => {\r\n                        successTransaction();\r\n                    })\r\n                    .catch(error => {\r\n                        reject(error);\r\n                    });\r\n            }, reject)\r\n                .catch(error => {\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n\r\n    public transaction(successTransaction: () => void): Promise<Crud> {\r\n        return new Promise((resolve, reject) => {\r\n            this.newTransaction(successTransaction)\r\n                .then((transaction) => {\r\n                    resolve(new Crud(transaction, this._getMapper, this.enableLog));\r\n                })\r\n                .catch(error => {\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n\r\n    public crud(): Promise<Crud> {\r\n        return new Promise((resolve, reject) => {\r\n            this.databaseInstance().then(database => {\r\n                resolve(new Crud(database, this._getMapper, this.enableLog));\r\n            })\r\n                .catch(reject);\r\n        });\r\n    }\r\n\r\n    public sql(sql: string, params: any[] = []): Promise<ResultExecuteSql> {\r\n        return new Promise((resolve, reject) => {\r\n            this.databaseInstance().then(database => {\r\n                const executable = new ExecutableBuilder(this.enableLog);\r\n                executable.execute({\r\n                    query: sql,\r\n                    // tslint:disable-next-line:object-literal-shorthand\r\n                    params: params\r\n                } as QueryCompiled, database)\r\n                    .then((cursor: ResultExecuteSql) => {\r\n                        resolve(cursor);\r\n                    });\r\n            })\r\n                .catch(reject);\r\n        });\r\n    }\r\n\r\n    public query<T>(typeT: new () => T, alias: string = void 0): Promise<Query<T>> {\r\n        return new Promise((resolve, reject) => {\r\n            this.databaseInstance()\r\n                .then(database => {\r\n                    resolve(new Query(typeT, alias, this._getMapper.getMapper(typeT), database, this.enableLog));\r\n                }, reject)\r\n                .catch(reject);\r\n        });\r\n    }\r\n\r\n    public ddl(): Promise<Ddl> {\r\n        return new Promise((resolve, reject) => {\r\n            this.databaseInstance().then(database => {\r\n                resolve(new Ddl(database, this._getMapper, this.enableLog));\r\n            })\r\n                .catch(reject);\r\n        });\r\n    }\r\n\r\n    protected abstract databaseName(): string;\r\n\r\n    public abstract version(): number;\r\n}\r\n",
    "import { DatabaseMigration } from \"./database-migration\";\r\nimport { DATABASE_NAME, VERSION } from \"./../dependency-injection-definition\";\r\nimport { Inject, Injectable } from \"@angular/core\";\r\nimport { SQLite, SQLiteObject } from \"@ionic-native/sqlite\";\r\nimport { Platform } from \"ionic-angular\";\r\nimport { BuildableDatabaseManager } from \"../utils/buildable-database-manager\";\r\nimport { MappersTableBase } from \"../utils/mappers-table-base\";\r\n\r\n@Injectable()\r\nexport class Database extends BuildableDatabaseManager {\r\n    constructor(\r\n        @Inject(VERSION) private _version: number,\r\n        @Inject(DATABASE_NAME) private _databaseName: string,\r\n        platform: Platform,\r\n        sqlite: SQLite,\r\n        getMapper: MappersTableBase,\r\n        private _databaseMigration: DatabaseMigration\r\n    ) {\r\n        super(platform, sqlite, getMapper);\r\n    }\r\n\r\n    protected migrationVersion(database: SQLiteObject, version: number): Promise<boolean> {\r\n        return this._databaseMigration.version(database, version);\r\n    }\r\n\r\n    protected databaseName(): string {\r\n        return this._databaseName;\r\n    }\r\n\r\n    public version(): number {\r\n        return this._version;\r\n    }\r\n}\r\n",
    "import { DATABASE_NAME, VERSION } from \"./dependency-injection-definition\";\r\nimport { Observable } from \"rxjs\";\r\nimport { ModuleWithProviders, NgModule, Provider, Type } from \"@angular/core\";\r\nimport { DatabaseHelperService } from \"./utils/database-helper-service\";\r\nimport { DatabaseMigrationContract } from \"./providers/database-migration-contract\";\r\nimport { DatabaseMigration } from \"./providers/database-migration\";\r\nimport { Database } from \"./providers/database\";\r\nimport { MappersTableBase } from \".\";\r\nimport { DatabaseNameFactory } from \"./utils/database-name-factory\";\r\n\r\n@NgModule({\r\n    providers: [\r\n        DatabaseMigration,\r\n        Database,\r\n        DatabaseMigrationContract\r\n    ]\r\n})\r\nexport class DatabaseModule {\r\n    // https://stackblitz.com/edit/ionic-j3f3ym\r\n    public static forRoot(\r\n        version: number,\r\n        databaseNameFactory: DatabaseNameFactory,\r\n        mapper: Type<MappersTableBase>,\r\n        databaseMigrationContract?: Type<DatabaseMigrationContract>\r\n    ): ModuleWithProviders {\r\n        const providers: Provider[] = [\r\n            DatabaseHelperService,\r\n            DatabaseMigrationContract,\r\n            {\r\n                provide: VERSION,\r\n                useValue: version\r\n            },\r\n            {\r\n                provide: DATABASE_NAME,\r\n                useFactory: databaseNameFactory.useFactory,\r\n                deps: databaseNameFactory.deps\r\n            },\r\n            {\r\n                provide: MappersTableBase,\r\n                useClass: mapper\r\n            }\r\n        ];\r\n        if (databaseMigrationContract) {\r\n            providers.push({\r\n                provide: DatabaseMigrationContract,\r\n                useClass: databaseMigrationContract\r\n            });\r\n        }\r\n        return {\r\n            ngModule: DatabaseModule,\r\n            providers: providers\r\n        };\r\n    }\r\n}\r\n"
  ],
  "names": [
    "extendStatics",
    "Object",
    "setPrototypeOf",
    "__proto__",
    "Array",
    "d",
    "b",
    "p",
    "hasOwnProperty",
    "__extends",
    "__",
    "this",
    "constructor",
    "prototype",
    "create",
    "VERSION",
    "InjectionToken",
    "DATABASE_NAME",
    "DatabaseHelperService",
    "_super",
    "tslib_1.__extends",
    "DatabaseHelper",
    "type",
    "Injectable",
    "DatabaseMigrationContract",
    "to",
    "version",
    "moment",
    "momentNs",
    "MigrationDatabaseBase",
    "_app",
    "_config",
    "database",
    "_this",
    "Promise",
    "resolve",
    "reject",
    "checkTableVersion",
    "then",
    "_",
    "checkVersion",
    "subscribe",
    "result",
    "migration",
    "r",
    "catch",
    "er",
    "errorAlert",
    "error",
    "console",
    "Alert",
    "title",
    "message",
    "buttons",
    "present",
    "executeSql",
    "newVersion",
    "Observable",
    "observer",
    "getVersion",
    "oldVersion",
    "info",
    "unix",
    "next",
    "complete",
    "rows",
    "length",
    "Number",
    "parseFloat",
    "item",
    "control",
    "transaction",
    "transation",
    "migrationExecute",
    "MappersTableBase",
    "DatabaseMigration",
    "_mappersTable",
    "app",
    "config",
    "_databaseMigrationContract",
    "call",
    "databaseReset",
    "observablesWait",
    "ddl",
    "Ddl",
    "forEachMapper",
    "value",
    "key",
    "readOnly",
    "push",
    "fromPromise",
    "drop",
    "newable",
    "execute",
    "forkJoin",
    "observablesNested",
    "toObservables",
    "concat",
    "callNested",
    "nextIndex",
    "App",
    "Config",
    "decorators",
    "Optional",
    "DatabaseManager",
    "_platform",
    "_sqlite",
    "_databases",
    "Map",
    "cleanDatabaseName",
    "name",
    "replace",
    "addDatabaseNameExtension",
    "databaseName",
    "databaseInstance",
    "keyDatabaseName",
    "has",
    "get",
    "set",
    "createDatabase",
    "invalidateInstance",
    "is",
    "db_1",
    "location",
    "migrationVersion",
    "catchException",
    "e",
    "BuildableDatabaseManager",
    "platform",
    "sqlite",
    "_getMapper",
    "enableLog",
    "Error",
    "newTransaction",
    "successTransaction",
    "x",
    "Crud",
    "crud",
    "sql",
    "params",
    "ExecutableBuilder",
    "query",
    "cursor",
    "typeT",
    "alias",
    "Query",
    "getMapper",
    "Database",
    "_version",
    "_databaseName",
    "_databaseMigration",
    "undefined",
    "Inject",
    "args",
    "Platform",
    "SQLite",
    "DatabaseModule",
    "forRoot",
    "databaseNameFactory",
    "mapper",
    "databaseMigrationContract",
    "providers",
    "provide",
    "useValue",
    "useFactory",
    "deps",
    "useClass",
    "ngModule",
    "NgModule"
  ],
  "mappings": "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"
}
