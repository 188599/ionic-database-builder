{
  "version": 3,
  "file": "ionic-database-builder.js",
  "sources": [
    "ng://ionic-database-builder/out/src/defaults/mappers-table-simple.ts",
    "ng://ionic-database-builder/out/src/defaults/database-settings-factory-default.ts",
    "ng://ionic-database-builder/out/src/utils/mappers-table-base.ts",
    "ng://ionic-database-builder/out/src/database.module.ts",
    "ng://ionic-database-builder/out/src/utils/database-settings-factory-contract.ts",
    "ng://ionic-database-builder/out/src/providers/database.ts",
    "ng://ionic-database-builder/out/src/utils/buildable-database-manager.ts",
    "ng://ionic-database-builder/out/src/utils/database-manager.ts",
    "ng://ionic-database-builder/out/src/providers/database-migration.ts",
    "ng://ionic-database-builder/out/src/utils/database-migration-base.ts",
    "ng://ionic-database-builder/out/src/providers/database-migration-contract.ts",
    "ng://ionic-database-builder/out/src/providers/database-helper-service.ts"
  ],
  "sourcesContent": [
    "import { DatabaseHelper, MetadataTable } from \"database-builder\";\r\nimport { MappersTableBase } from \"..\";\r\nimport { MapperSettingsModel } from \"../model/mapper-settings-model\";\r\n\r\nexport class MappersTableSimple extends MappersTableBase {\r\n\r\n    private _mappers: Map<string, MetadataTable<any>> = new Map<string, MetadataTable<any>>();\r\n\r\n    constructor(\r\n        private _databaseHelper: DatabaseHelper,\r\n        protected _defaultSettings: MapperSettingsModel\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    public mapper(\r\n        readOnly?: boolean,\r\n        keyColumn?: string,\r\n        settings: MapperSettingsModel = this._defaultSettings,\r\n        ...defaultsMapper: Array<new () => any>\r\n    ): MappersTableSimple {\r\n        defaultsMapper.forEach(mapper => {\r\n            this.add(mapper, readOnly, keyColumn);\r\n        });\r\n        return this;\r\n    }\r\n\r\n    public add<T>(\r\n        newable: new () => T,\r\n        readOnly?: boolean,\r\n        keyColumn?: string,\r\n        settings: MapperSettingsModel = this._defaultSettings,\r\n        advancedMapper: (metadata: MetadataTable<T>) => void = void 0\r\n    ): MappersTableSimple {\r\n        const metadata = new MetadataTable(newable, this._databaseHelper, readOnly, keyColumn)\r\n            .autoMapper(\r\n                settings.references,\r\n                settings.referencesId,\r\n                settings.referencesIdRecursive,\r\n                settings.referencesIdColumn\r\n            );\r\n        if (advancedMapper) {\r\n            advancedMapper(metadata);\r\n        }\r\n        this.push(metadata);\r\n        return this;\r\n    }\r\n\r\n    public getMapper<T>(tKey: new () => T): MetadataTable<T> {\r\n        return this._mappers.get(tKey.name);\r\n    }\r\n\r\n    public forEachMapper(\r\n        callbackfn: (value: MetadataTable<any>, key: string, map: Map<string, MetadataTable<any>>) => void,\r\n        thisArg?: any\r\n    ): void {\r\n        this._mappers.forEach(callbackfn);\r\n    }\r\n\r\n    private push(metadataTable: MetadataTable<any>): void {\r\n        this._mappers.set(metadataTable.instance.constructor.name, metadataTable);\r\n    }\r\n}\r\n",
    "import { Injector } from \"@angular/core\";\r\nimport { DatabaseSettingsFactoryContract, MappersTableBase } from \"..\";\r\nimport { DatabaseSettingsModel } from \"../model/database-settings-model\";\r\n\r\nexport class DatabaseSettingsFactoryDefault extends DatabaseSettingsFactoryContract {\r\n\r\n    private _model: DatabaseSettingsModel;\r\n\r\n    constructor(\r\n        versionOrModel: number | DatabaseSettingsModel,\r\n        databaseName: string,\r\n        mapper: MappersTableBase\r\n    ) {\r\n        super();\r\n        if (Number.isInteger(versionOrModel as number)) {\r\n            this._model = {\r\n                version: versionOrModel as number,\r\n                databaseName: databaseName,\r\n                mapper: mapper\r\n            };\r\n        } else {\r\n            this._model = versionOrModel as DatabaseSettingsModel;\r\n        }\r\n    }\r\n\r\n    public databaseName(injector: Injector): string {\r\n        return this._model.databaseName;\r\n    }\r\n\r\n    public version(injector: Injector): number {\r\n        return this._model.version;\r\n    }\r\n\r\n    public mapper(): MappersTableBase {\r\n        return this._model.mapper;\r\n    }\r\n}\r\n",
    "import { GetMapper, MetadataTable } from \"database-builder\";\r\n\r\nexport abstract class MappersTableBase implements GetMapper {\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    public abstract getMapper<T>(tKey: new () => T): MetadataTable<T>;\r\n    public abstract forEachMapper(callbackfn: (value: MetadataTable<any>, key: string, map: Map<string, MetadataTable<any>>) => void, thisArg?: any): void;\r\n}\r\n",
    "import { Observable } from \"rxjs\";\r\nimport { ModuleWithProviders, NgModule, Provider, Type } from \"@angular/core\";\r\nimport { DatabaseHelperService } from \"./providers/database-helper-service\";\r\nimport { DatabaseMigrationContract } from \"./providers/database-migration-contract\";\r\nimport { DatabaseMigration } from \"./providers/database-migration\";\r\nimport { Database } from \"./providers/database\";\r\nimport { DatabaseSettingsFactoryContract } from \"./utils/database-settings-factory-contract\";\r\n\r\n@NgModule({\r\n    providers: [\r\n        DatabaseMigration,\r\n        Database,\r\n        DatabaseHelperService\r\n    ]\r\n})\r\n// https://stackblitz.com/edit/ionic-j3f3ym\r\nexport class DatabaseModule {\r\n\r\n    public static forRoot(\r\n        settings: Type<DatabaseSettingsFactoryContract>,\r\n        databaseMigrationContract?: Type<DatabaseMigrationContract>\r\n    ): ModuleWithProviders {\r\n        const providers: Provider[] = [\r\n            {\r\n                provide: DatabaseSettingsFactoryContract,\r\n                useClass: settings\r\n            }\r\n        ];\r\n        return this.forBase(providers);\r\n    }\r\n\r\n    public static forRootValue(\r\n        settings: DatabaseSettingsFactoryContract,\r\n        databaseMigrationContract?: Type<DatabaseMigrationContract>\r\n    ): ModuleWithProviders {\r\n        const providers: Provider[] = [\r\n            {\r\n                provide: DatabaseSettingsFactoryContract,\r\n                useValue: settings\r\n            }\r\n        ];\r\n        return this.forBase(providers);\r\n    }\r\n\r\n    private static forBase(\r\n        providers: Provider[],\r\n        databaseMigrationContract?: Type<DatabaseMigrationContract>\r\n    ): ModuleWithProviders {\r\n        if (databaseMigrationContract) {\r\n            providers.push({\r\n                provide: DatabaseMigrationContract,\r\n                useClass: databaseMigrationContract\r\n            });\r\n        }\r\n        return {\r\n            ngModule: DatabaseModule,\r\n            providers: providers\r\n        };\r\n    }\r\n}\r\n",
    "import { Injector } from \"@angular/core\";\r\nimport { MappersTableBase } from \"..\";\r\n\r\nexport abstract class DatabaseSettingsFactoryContract {\r\n\r\n    public abstract databaseName(injector: Injector): string;\r\n    public abstract version(injector: Injector): number;\r\n    public abstract mapper(injector: Injector): MappersTableBase;\r\n\r\n}\r\n",
    "import { DatabaseMigration } from \"./database-migration\";\r\nimport { Injectable, Injector } from \"@angular/core\";\r\nimport { SQLite, SQLiteObject } from \"@ionic-native/sqlite\";\r\nimport { Platform } from \"ionic-angular\";\r\nimport { BuildableDatabaseManager } from \"../utils/buildable-database-manager\";\r\nimport { DatabaseSettingsFactoryContract } from \"..\";\r\n\r\n@Injectable()\r\nexport class Database extends BuildableDatabaseManager {\r\n    constructor(\r\n        private _injector: Injector,\r\n        private _settings: DatabaseSettingsFactoryContract,\r\n        platform: Platform,\r\n        sqlite: SQLite,\r\n        private _databaseMigration: DatabaseMigration\r\n    ) {\r\n        super(platform, sqlite,\r\n            _settings.mapper(_injector)\r\n        );\r\n    }\r\n\r\n    protected migrationVersion(database: SQLiteObject, version: number): Promise<boolean> {\r\n        return this._databaseMigration.version(database, version);\r\n    }\r\n\r\n    protected databaseName(): string {\r\n        return this._settings.databaseName(this._injector);\r\n    }\r\n\r\n    public version(): number {\r\n        return this._settings.version(this._injector);\r\n    }\r\n}\r\n",
    "import { DatabaseManager } from \"./database-manager\";\r\nimport { Platform } from \"ionic-angular\";\r\nimport { SQLite, SQLiteObject, SQLiteTransaction } from \"@ionic-native/sqlite\";\r\nimport { Crud, Ddl, ExecutableBuilder, Query, QueryCompiled, ResultExecuteSql } from \"database-builder\";\r\nimport { MappersTableBase } from \"../utils/mappers-table-base\";\r\n\r\nexport abstract class BuildableDatabaseManager extends DatabaseManager {\r\n\r\n    constructor(\r\n        platform: Platform, sqlite: SQLite,\r\n        private _mapper: MappersTableBase,\r\n        public enableLog: boolean = true\r\n    ) {\r\n        super(platform, sqlite);\r\n    }\r\n\r\n    public get mapper(): MappersTableBase {\r\n        return this._mapper;\r\n    }\r\n\r\n    public databaseInstance(): Promise<SQLiteObject> {\r\n        const database = super.databaseInstance(this.databaseName(), this.version());\r\n        if (!database) {\r\n            throw new Error(\"SQLite not avaliable!\");\r\n        }\r\n        return database;\r\n    }\r\n\r\n    public newTransaction(successTransaction: () => void): Promise<SQLiteTransaction> {\r\n        return new Promise((resolve, reject) => {\r\n            this.databaseInstance().then(database => {\r\n                database.transaction((result: SQLiteTransaction) => {\r\n                    resolve(result);\r\n                })\r\n                    .then(x => {\r\n                        successTransaction();\r\n                    })\r\n                    .catch(error => {\r\n                        reject(error);\r\n                    });\r\n            }, reject)\r\n                .catch(error => {\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n\r\n    public transaction(successTransaction: () => void): Promise<Crud> {\r\n        return new Promise((resolve, reject) => {\r\n            this.newTransaction(successTransaction)\r\n                .then((transaction) => {\r\n                    resolve(new Crud(transaction, this._mapper, this.enableLog));\r\n                })\r\n                .catch(error => {\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n\r\n    public crud(): Promise<Crud> {\r\n        return new Promise((resolve, reject) => {\r\n            this.databaseInstance().then(database => {\r\n                resolve(new Crud(database, this._mapper, this.enableLog));\r\n            })\r\n                .catch(reject);\r\n        });\r\n    }\r\n\r\n    public sql(sql: string, params: any[] = []): Promise<ResultExecuteSql> {\r\n        return new Promise((resolve, reject) => {\r\n            this.databaseInstance().then(database => {\r\n                const executable = new ExecutableBuilder(this.enableLog);\r\n                executable.execute({\r\n                    query: sql,\r\n                    // tslint:disable-next-line:object-literal-shorthand\r\n                    params: params\r\n                } as QueryCompiled, database)\r\n                    .then((cursor: ResultExecuteSql) => {\r\n                        resolve(cursor);\r\n                    });\r\n            })\r\n                .catch(reject);\r\n        });\r\n    }\r\n\r\n    public query<T>(typeT: new () => T, alias: string = void 0): Promise<Query<T>> {\r\n        return new Promise((resolve, reject) => {\r\n            this.databaseInstance()\r\n                .then(database => {\r\n                    resolve(new Query(typeT, alias, this._mapper.getMapper(typeT), database, this.enableLog));\r\n                }, reject)\r\n                .catch(reject);\r\n        });\r\n    }\r\n\r\n    public ddl(): Promise<Ddl> {\r\n        return new Promise((resolve, reject) => {\r\n            this.databaseInstance().then(database => {\r\n                resolve(new Ddl(database, this._mapper, this.enableLog));\r\n            })\r\n                .catch(reject);\r\n        });\r\n    }\r\n\r\n    protected abstract databaseName(): string;\r\n\r\n    public abstract version(): number;\r\n}\r\n",
    "import { SQLite, SQLiteObject } from \"@ionic-native/sqlite\";\r\nimport { Platform } from \"ionic-angular\";\r\n\r\nexport abstract class DatabaseManager {\r\n\r\n    private _databases: Map<string, Promise<SQLiteObject>> = new Map<string, Promise<SQLiteObject>>();\r\n\r\n    constructor(protected _platform: Platform, private _sqlite: SQLite) {\r\n\r\n    }\r\n\r\n    public cleanDatabaseName(name: string) {\r\n        return name.replace(/([^a-z0-9]+)/gi, \"-\");\r\n    }\r\n\r\n    protected addDatabaseNameExtension(databaseName: string): string {\r\n        return `${databaseName}.db`;\r\n    }\r\n\r\n    public databaseInstance(name: string, version: number): Promise<SQLiteObject> {\r\n        const keyDatabaseName: string = name + version;\r\n        return this._databases.has(keyDatabaseName)\r\n            ? this._databases.get(keyDatabaseName)\r\n            : this._databases.set(keyDatabaseName, this.createDatabase(this.addDatabaseNameExtension(this.cleanDatabaseName(name)), version)).get(keyDatabaseName);\r\n    }\r\n\r\n    public invalidateInstance() {\r\n        this._databases = new Map<string, Promise<SQLiteObject>>();\r\n    }\r\n\r\n    protected abstract migrationVersion(database: SQLiteObject, version: number): Promise<boolean>;\r\n\r\n    private createDatabase(name: string, version: number): Promise<SQLiteObject> {\r\n        return new Promise<SQLiteObject>((resolve, reject) => {\r\n            if (this._platform.is(\"cordova\")) {\r\n                const db = this._sqlite.create({\r\n                    name: name,\r\n                    location: \"default\"\r\n                });\r\n                db.then((database: SQLiteObject) => {\r\n                    this.migrationVersion(database, version)\r\n                        .then(_ => resolve(db))\r\n                        .catch(er => reject(er));\r\n                }).catch(error => {\r\n                    this.catchException(error);\r\n                    reject(error);\r\n                });\r\n            } else {\r\n                resolve(void 0);\r\n            }\r\n        });\r\n    }\r\n\r\n    private catchException(e: any) {\r\n        // tslint:disable-next-line:no-console\r\n        console.error(e);\r\n    }\r\n}\r\n",
    "import { DatabaseSettingsFactoryContract } from \"..\";\r\nimport { Version } from \"./../model/version-model\";\r\nimport { Observer } from \"rxjs/Observer\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { App, Config } from \"ionic-angular\";\r\nimport { Injectable, Injector, Optional } from \"@angular/core\";\r\nimport { SQLiteTransaction } from \"@ionic-native/sqlite\";\r\nimport { Ddl } from \"database-builder\";\r\nimport { DatabaseMigrationContract } from \"./database-migration-contract\";\r\nimport { DatabaseMigrationBase } from \"../utils/database-migration-base\";\r\n\r\n@Injectable()\r\nexport class DatabaseMigration extends DatabaseMigrationBase {\r\n\r\n    constructor(\r\n        private _injector: Injector,\r\n        private _settings: DatabaseSettingsFactoryContract,\r\n        app: App,\r\n        config: Config,\r\n        @Optional() private _databaseMigrationContract: DatabaseMigrationContract\r\n    ) {\r\n        super(\r\n            app, config\r\n        );\r\n    }\r\n\r\n    public databaseReset(transation: SQLiteTransaction): Observable<any> {\r\n\r\n        // tslint:disable-next-line:no-console\r\n        console.info(\"database reset\");\r\n\r\n        const observablesWait: Array<Observable<any>> = [];\r\n\r\n        // const mappers = this._mappersTable;\r\n        const mappers = this._settings.mapper(this._injector);\r\n\r\n        // remove dados offline da versão anterior, pois o formato dos dados foi alterado de uma versão para a outra\r\n        const ddl = new Ddl(transation, mappers, true);\r\n        mappers.forEachMapper((value, key) => {\r\n            if (!value.readOnly) {\r\n                observablesWait.push(Observable.fromPromise(ddl.drop(value.newable).execute()));\r\n                observablesWait.push(Observable.fromPromise(ddl.create(value.newable).execute()));\r\n            }\r\n        });\r\n\r\n        return Observable.forkJoin(observablesWait);\r\n    }\r\n\r\n    protected migrationExecute(transation: SQLiteTransaction, version: Version): Promise<boolean> {\r\n        return new Promise<boolean>((resolve, reject) => {\r\n\r\n            let observablesNested: Array<Observable<any>> = [];\r\n            if (this._databaseMigrationContract) {\r\n                const toObservables = this._databaseMigrationContract.to(\r\n                    version, transation, this._settings.mapper(this._injector)\r\n                );\r\n                if (toObservables && toObservables.length > 0) {\r\n                    observablesNested = observablesNested.concat(toObservables);\r\n                }\r\n            }\r\n\r\n            if (observablesNested.length === 0 && version.oldVersion < 1) {\r\n                observablesNested.push(this.databaseReset(transation));\r\n            }\r\n\r\n            this.callNested(observablesNested, 0).subscribe(result => {\r\n                resolve(result);\r\n            }, error => reject(error));\r\n        });\r\n    }\r\n\r\n    private callNested(observablesNested: Array<Observable<any>>, nextIndex: number): Observable<boolean> {\r\n        return Observable.create((observer: Observer<boolean>) => {\r\n            if (observablesNested.length > nextIndex) {\r\n                observablesNested[nextIndex].subscribe(result => {\r\n                    this.callNested(observablesNested, ++nextIndex).subscribe(_ => {\r\n                        observer.next(true);\r\n                        observer.complete();\r\n                    }, error => {\r\n                        observer.error(error);\r\n                        observer.complete();\r\n                    });\r\n                });\r\n            } else {\r\n                observer.next(true);\r\n                observer.complete();\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n",
    "import { Observer } from \"rxjs/Observer\";\r\nimport { Alert, App, Config } from \"ionic-angular\";\r\nimport { SQLiteObject, SQLiteTransaction } from \"@ionic-native/sqlite\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport * as momentNs from \"moment\";\r\nconst moment = momentNs;\r\n\r\nexport abstract class DatabaseMigrationBase {\r\n\r\n    constructor(\r\n        protected _app: App, protected _config: Config\r\n    ) {\r\n\r\n    }\r\n\r\n    public version(database: SQLiteObject, version: number): Promise<boolean> {\r\n        return new Promise<boolean>((resolve, reject) => {\r\n            this.checkTableVersion(database).then(_ => {\r\n                this.checkVersion(database, version)\r\n                    .subscribe(result => {\r\n                        this.migration(database, result)\r\n                            .then(r => resolve(r))\r\n                            .catch(er => reject(er));\r\n                    }, er => reject(er));\r\n            })\r\n                .catch(er => reject(er));\r\n        });\r\n    }\r\n\r\n    protected errorAlert(error: string) {\r\n        // tslint:disable-next-line:no-console\r\n        console.error(error);\r\n        const alert = new Alert(this._app, {\r\n            title: \"Erro ao salvar dados off-line!\",\r\n            message: error,\r\n            buttons: [\"OK\"]\r\n        }, this._config);\r\n        alert.present();\r\n    }\r\n\r\n    protected abstract migrationExecute(transation: SQLiteTransaction, control: { oldVersion: number, newVersion: number }): Promise<boolean>;\r\n\r\n    private checkTableVersion(database: SQLiteObject): Promise<any> {\r\n        return new Promise<any>((resolve, reject) => {\r\n            const scriptTableVersion = `CREATE TABLE IF NOT EXISTS MigrationVersion(\r\n                    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT\r\n                    , data INTEGER\r\n                    , version TEXT\r\n                    );`;\r\n            database.executeSql(scriptTableVersion, {})\r\n                .then(resolve)\r\n                .catch(reject);\r\n        });\r\n    }\r\n\r\n    private checkVersion(database: SQLiteObject, newVersion: number): Observable<{ oldVersion: number, newVersion: number }> {\r\n        return Observable.create((observer: Observer<any>) => {\r\n            this.getVersion(database).subscribe(oldVersion => {\r\n                if (oldVersion > 0) {\r\n                    if (newVersion > oldVersion) {\r\n                        // tslint:disable-next-line:no-console\r\n                        console.info(`Version old: ${oldVersion}`);\r\n                        database.executeSql(`UPDATE MigrationVersion\r\n                                SET (data, version) = (?, ?);`,\r\n                            [moment().unix(), newVersion])\r\n                            .then()\r\n                            .catch(this.errorAlert);\r\n                    }\r\n                } else {\r\n                    database.executeSql(`INSERT INTO MigrationVersion (data, version) VALUES (?, ?)`,\r\n                        [moment().unix(), newVersion])\r\n                        .then()\r\n                        .catch(this.errorAlert);\r\n                }\r\n                observer.next({\r\n                    oldVersion: oldVersion,\r\n                    newVersion: newVersion\r\n                });\r\n                observer.complete();\r\n            });\r\n        });\r\n    }\r\n\r\n    private getVersion(database: SQLiteObject): Observable<number> {\r\n        return Observable.create((observer: Observer<number>) => {\r\n            database.executeSql(`SELECT * FROM MigrationVersion`, {})\r\n                .then((result) => {\r\n                    let version = 0;\r\n                    if (result.rows.length > 0) {\r\n                        version = Number.parseFloat(result.rows.item(0).version);\r\n                    }\r\n                    observer.next(version);\r\n                    observer.complete();\r\n                })\r\n                .catch(this.errorAlert);\r\n        });\r\n    }\r\n\r\n    private migration(database: SQLiteObject, control: { oldVersion: number, newVersion: number }): Promise<boolean> {\r\n        return new Promise<boolean>((resolve, reject) => {\r\n            database.transaction((transation: SQLiteTransaction) => {\r\n                this.migrationExecute(transation, control)\r\n                    .then(r => resolve(r))\r\n                    .catch(er => reject(er));\r\n            });\r\n        });\r\n    }\r\n}\r\n",
    "import { MappersTableBase } from \"..\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Version } from \"./../model/version-model\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { SQLiteTransaction } from \"@ionic-native/sqlite\";\r\n\r\n@Injectable()\r\nexport abstract class DatabaseMigrationContract {\r\n\r\n    public abstract to(\r\n        version: Version,\r\n        transation: SQLiteTransaction,\r\n        mappers: MappersTableBase\r\n    ): Array<Observable<any>>;\r\n}\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { DatabaseHelper } from \"database-builder\";\r\n\r\n@Injectable()\r\nexport class DatabaseHelperService extends DatabaseHelper {\r\n\r\n}\r\n"
  ],
  "names": [],
  "mappings": "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"
}
